package com.murun.fict.repository;


import com.murun.fict.TestService;
import com.murun.fict.main.ApplicationConfiguration;
import com.murun.fict.model.*;
import org.junit.Before;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.murun.fict.TestService.createAddress;
import static com.murun.fict.TestService.createAddressType;
import static com.murun.fict.TestService.createEntityAddress;
import static org.junit.Assert.*;

@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@SpringBootTest
@ContextConfiguration(classes = ApplicationConfiguration.class)
@Transactional
public class LegalEntityRepositoryTest {


    @Resource
    LegalEntityRepository legalEntityRepository;

    @Resource
    LegalEntityTypeRepository legalEntityTypeRepository;

    @Resource
    AddressTypeRepository addressTypeRepository;

    @Resource
    AddressRepository addressRepository;

    @Resource
    EntityAddressRepository entityAddressRepository;


    private LegalEntity legalEntity;

    @Before
    public void setUp() {
        legalEntity = new LegalEntity();
        LegalEntityType leCorp = TestService.createLegalEntityType(TestService.LegalEntityTypeTestEnum.CORPORATION);

        legalEntity.setLegalEntityType(leCorp);
        legalEntityTypeRepository.save(leCorp);
        legalEntityTypeRepository.flush();


    }

    @After
    public void tearDown() {
        legalEntityTypeRepository.deleteAll();
    }

    @Test
    public void shouldSaveWithAutoGeneratedId() {

        assertNull(legalEntity.getLegalEntityId());
        legalEntityRepository.save(legalEntity);
        assertNotNull(legalEntity.getLegalEntityId());
    }

    @Test
    public void shouldUpdate() {

        LegalEntityType leTrust = TestService.createLegalEntityType(TestService.LegalEntityTypeTestEnum.LIVING_TRUST);
        legalEntityTypeRepository.save(leTrust);
        legalEntityTypeRepository.flush();

        legalEntityRepository.save(legalEntity);
        legalEntity.setLegalEntityType(leTrust);
        legalEntityRepository.save(legalEntity);

        LegalEntity legalEntityRetrieved = legalEntityRepository.findOne(legalEntity.getLegalEntityId());
        assertEquals(legalEntity.getLegalEntityType(), legalEntityRetrieved.getLegalEntityType());
    }

    @Test
    public void verifyCount() {
        legalEntityRepository.save(legalEntity);
        assertEquals(legalEntityRepository.count(), legalEntityRepository.findAll().stream().count());
    }

    private void setEntityAddresses() {
        AddressType adResidence = createAddressType(TestService.AddressTypeTestEnum.RESIDENCE);
        addressTypeRepository.save(adResidence);

        AddressType adWork = createAddressType(TestService.AddressTypeTestEnum.WORK);
        addressTypeRepository.save(adWork);

        AddressType adMail = createAddressType(TestService.AddressTypeTestEnum.MAIL);
        addressTypeRepository.save(adMail);
        addressTypeRepository.flush();

        Address ad1 = createAddress("Santa Monica", "CA", "90402");
        Address ad2 = createAddress("Westwood", "CA", "90401");
        Address ad3 = createAddress("Phoenix", "AZ", "910202");
        Address ad4 = createAddress("San Antonio", "TX", "78201");
        addressRepository.save(ad1);
        addressRepository.save(ad2);
        addressRepository.save(ad3);
        addressRepository.save(ad4);
        addressRepository.flush();

        EntityAddress entityAddress1 = createEntityAddress(legalEntity, ad1, adResidence);
        EntityAddress entityAddress2 = createEntityAddress(legalEntity, ad2, adResidence);
        EntityAddress entityAddress3 = createEntityAddress(legalEntity, ad3, adWork);
        EntityAddress entityAddress4 = createEntityAddress(legalEntity, ad4, adMail);
        entityAddressRepository.save(entityAddress1);
        entityAddressRepository.save(entityAddress2);
        entityAddressRepository.save(entityAddress3);
        entityAddressRepository.save(entityAddress4);
        entityAddressRepository.flush();

        Set<EntityAddress> entityAddresses = new HashSet<>();
        entityAddresses.add(entityAddress1);
        entityAddresses.add(entityAddress2);
        entityAddresses.add(entityAddress3);
        entityAddresses.add(entityAddress4);
        entityAddressRepository.save(entityAddresses);
        entityAddressRepository.flush();
        legalEntity.setEntityAddresses(entityAddresses);

    }

    @Test
    public void shouldGetEntitiesWithAddressesInState() {
        legalEntityRepository.save(legalEntity);
        legalEntityRepository.flush();

        setEntityAddresses();

        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInState("TX").size());
        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInState("AZ").size());
        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInState("ca").size());
        assertEquals(0, legalEntityRepository.getEntitiesWithAddressesInState("NY").size());
    }

    @Test
    public void shouldGetEntitiesWithAddressesInCity() {
        legalEntityRepository.save(legalEntity);
        legalEntityRepository.flush();

        setEntityAddresses();

        List<LegalEntity> legalEntityList = legalEntityRepository.findAll();

        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInCity("santa monica").size());
        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInCity("Westwood").size());
        assertEquals(1, legalEntityRepository.getEntitiesWithAddressesInCity("Phoenix").size());
        assertEquals(0, legalEntityRepository.getEntitiesWithAddressesInCity("Nowhere").size());
    }


}
